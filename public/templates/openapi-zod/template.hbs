import { z } from "zod";

{{#if types}}
  {{#each types}}
    {{{this}}};
  {{/each}}
{{/if}}

{{#each schemas}}
  export const {{@key}}{{#if (lookup ../emittedType @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};
{{/each}}

{{!-- === per‚Äêoperation schema exports === --}}
{{#each endpoints}}
export const {{#if alias}}{{alias}}{{else}}{{operation.operationId}}{{/if}}Schema = {
  method: "{{method}}",
  path:   "{{path}}",
  {{#if alias}}alias: "{{alias}}",{{/if}}
  {{#if requestFormat}}requestFormat: "{{requestFormat}}",{{/if}}
  {{!-- ==== query params ==== --}}
  {{#fohoovEachByType parameters "Query"}}
    {{#if @first}}
  query: z.object({
    {{/if}}
    "{{name}}": {{{schema}}}{{#unless @last}},{{/unless}}
    {{#if @last}}
  }),
    {{/if}}
  {{/fohoovEachByType}}
  {{!-- ==== path params ==== --}}
  {{#fohoovEachByType parameters "Path"}}
    {{#if @first}}
  params: z.object({
    {{/if}}
    "{{name}}": {{{schema}}}{{#unless @last}},{{/unless}}
    {{#if @last}}
  }),
    {{/if}}
  {{/fohoovEachByType}}
  {{!-- ==== body (only one) ==== --}}
  {{#fohoovEachByType parameters "Body"}}
    {{#if @first}}
  body: {{{schema}}},
    {{/if}}
  {{/fohoovEachByType}}
  response: {{response}},
  errors: [
  {{#each errors}}
  {
    {{#ifeq status "default" }}
    status: "default",
    {{else}}
    status: {{status}},
    {{/ifeq}}
    {{#if description}}
    description: `{{description}}`,
    {{/if}}
    schema: {{{schema}}}
  },
  {{/each}}
]
} as const;

{{/each}}
